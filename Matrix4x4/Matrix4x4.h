#ifndef MATRIX4X4_h
#define MATRIX4X4_h

#include "Arduino.h"

class Matrix4x4
{
public:
        Matrix4x4();
        virtual ~Matrix4x4();

        inline void Copy4x4(float** A,float** Y)
        {
            Y[0][0] = A[0][0];
            Y[0][1] = A[0][1];
            Y[0][2] = A[0][2];
            Y[0][3] = A[0][3];

            Y[1][0] = A[1][0];
            Y[1][1] = A[1][1];
            Y[1][2] = A[1][2];
            Y[1][3] = A[1][3];

            Y[2][0] = A[2][0];
            Y[2][1] = A[2][1];
            Y[2][2] = A[2][2];
            Y[2][3] = A[2][3];

            Y[3][0] = A[3][0];
            Y[3][1] = A[3][1];
            Y[3][2] = A[3][2];
            Y[3][3] = A[3][3];
        }

        inline void Zero4x4(float** A)
        {
            A[0][0] = 0.0f;
            A[0][1] = 0.0f;
            A[0][2] = 0.0f;
            A[0][3] = 0.0f;

            A[1][0] = 0.0f;
            A[1][1] = 0.0f;
            A[1][2] = 0.0f;
            A[1][3] = 0.0f;

            A[2][0] = 0.0f;
            A[2][1] = 0.0f;
            A[2][2] = 0.0f;
            A[2][3] = 0.0f;

            A[3][0] = 0.0f;
            A[3][1] = 0.0f;
            A[3][2] = 0.0f;
            A[3][3] = 0.0f;
        }

        inline void Eye4x4(float** A)
        {
            A[0][0] = 1.0f;
            A[0][1] = 0.0f;
            A[0][2] = 0.0f;
            A[0][3] = 0.0f;

            A[1][0] = 0.0f;
            A[1][1] = 1.0f;
            A[1][2] = 0.0f;
            A[1][3] = 0.0f;

            A[2][0] = 0.0f;
            A[2][1] = 0.0f;
            A[2][2] = 1.0f;
            A[2][3] = 0.0f;

            A[3][0] = 0.0f;
            A[3][1] = 0.0f;
            A[3][2] = 0.0f;
            A[3][3] = 1.0f;
        }

        inline void ScaledEye4x4(float** A,float S)
        {
            A[0][0] = S;
            A[0][1] = 0.0f;
            A[0][2] = 0.0f;
            A[0][3] = 0.0f;

            A[1][0] = 0.0f;
            A[1][1] = S;
            A[1][2] = 0.0f;
            A[1][3] = 0.0f;

            A[2][0] = 0.0f;
            A[2][1] = 0.0f;
            A[2][2] = S;
            A[2][3] = 0.0f;

            A[3][0] = 0.0f;
            A[3][1] = 0.0f;
            A[3][2] = 0.0f;
            A[3][3] = S;
        }

        inline void Scale4x4(float** A,float B)
        {
            A[0][0] *= B;
            A[0][1] *= B;
            A[0][2] *= B;
            A[0][3] *= B;

            A[1][0] *= B;
            A[1][1] *= B;
            A[1][2] *= B;
            A[1][3] *= B;

            A[2][0] *= B;
            A[2][1] *= B;
            A[2][2] *= B;
            A[2][3] *= B;

            A[3][0] *= B;
            A[3][1] *= B;
            A[3][2] *= B;
            A[3][3] *= B;
        }

        inline void ScaledCopy4x4(float** A,float B,float** Y)
        {
            Y[0][0] = A[0][0] * B;
            Y[0][1] = A[0][1] * B;
            Y[0][2] = A[0][2] * B;
            Y[0][3] = A[0][3] * B;

            Y[1][0] = A[1][0] * B;
            Y[1][1] = A[1][1] * B;
            Y[1][2] = A[1][2] * B;
            Y[1][3] = A[1][3] * B;

            Y[2][0] = A[2][0] * B;
            Y[2][1] = A[2][1] * B;
            Y[2][2] = A[2][2] * B;
            Y[2][3] = A[2][3] * B;

            Y[3][0] = A[3][0] * B;
            Y[3][1] = A[3][1] * B;
            Y[3][2] = A[3][2] * B;
            Y[3][3] = A[3][3] * B;
        }

        inline void Add4x4(float** A,float** B,float** Y)
        {
            Y[0][0] = A[0][0] + B[0][0];
            Y[0][1] = A[0][1] + B[0][1];
            Y[0][2] = A[0][2] + B[0][2];
            Y[0][3] = A[0][3] + B[0][3];

            Y[1][0] = A[1][0] + B[1][0];
            Y[1][1] = A[1][1] + B[1][1];
            Y[1][2] = A[1][2] + B[1][2];
            Y[1][3] = A[1][3] + B[1][3];

            Y[2][0] = A[2][0] + B[2][0];
            Y[2][1] = A[2][1] + B[2][1];
            Y[2][2] = A[2][2] + B[2][2];
            Y[2][3] = A[2][3] + B[2][3];

            Y[3][0] = A[3][0] + B[3][0];
            Y[3][1] = A[3][1] + B[3][1];
            Y[3][2] = A[3][2] + B[3][2];
            Y[3][3] = A[3][3] + B[3][3];
        }

        inline void Subtract4x4(float** A,float** B,float** Y)
        {
            Y[0][0] = A[0][0] - B[0][0];
            Y[0][1] = A[0][1] - B[0][1];
            Y[0][2] = A[0][2] - B[0][2];
            Y[0][3] = A[0][3] - B[0][3];

            Y[1][0] = A[1][0] - B[1][0];
            Y[1][1] = A[1][1] - B[1][1];
            Y[1][2] = A[1][2] - B[1][2];
            Y[1][3] = A[1][3] - B[1][3];

            Y[2][0] = A[2][0] - B[2][0];
            Y[2][1] = A[2][1] - B[2][1];
            Y[2][2] = A[2][2] - B[2][2];
            Y[2][3] = A[2][3] - B[2][3];

            Y[3][0] = A[3][0] - B[3][0];
            Y[3][1] = A[3][1] - B[3][1];
            Y[3][2] = A[3][2] - B[3][2];
            Y[3][3] = A[3][3] - B[3][3];
        }

        inline void TransposeCopy4x4(float** A,float** Y)
        {
            Y[0][0] = A[0][0];
            Y[0][1] = A[1][0];
            Y[0][2] = A[2][0];
            Y[0][3] = A[3][0];

            Y[1][0] = A[0][1];
            Y[1][1] = A[1][1];
            Y[1][2] = A[2][1];
            Y[1][3] = A[3][1];

            Y[2][0] = A[0][2];
            Y[2][1] = A[1][2];
            Y[2][2] = A[2][2];
            Y[2][3] = A[3][2];

            Y[3][0] = A[0][3];
            Y[3][1] = A[1][3];
            Y[3][2] = A[2][3];
            Y[3][3] = A[3][3];
        }

        void Diag4x4(float**,float,float,float,float);
        void Transpose4x4(float**);
        void Multiply4x4(float**,float**,float**);
        void VectorMultiply4x4(float**,float*,float*);
        bool Invert4x4(float**,float**);
        float Determinant4x4(float**);

private:

};

#endif
